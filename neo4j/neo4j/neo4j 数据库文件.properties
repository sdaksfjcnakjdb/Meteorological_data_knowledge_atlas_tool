################################构造图谱###############################################################################################
#根据前端json生成cypher语句
(1)前端传入的json格式：
{
"lable":[
{"lablename":"Md"}
],
"nodes":[
{"name":"C_CNTPHONE","comment":"电话"},
{"name":"C_MDFILEID","comment":"元数据标识符"},
{"name":"C_MDLANG","comment":"元数据语种"}
],
"links":[
{"source":"C_CNTPHONE","type":"include","target":"C_MDFILEID"},
{"source":"C_MDLANG","type":"include","target":"C_MDFILEID"}
]
}

(2)Json格式解析：
（i）lable:lablename(知识图谱表名)
(ii)nodes:name（节点名称）,comment（节点注释）
(iii)links:source（关系开始节点）,type（关系名）,target（关系结束节点）

(3)cypher语句组装
String cypher="CREATE (n:$lablename{name:'$name',comment:'$comment'})" *3
String cypher="MATCH (a:$lablename),(b:$lablename)
WHERE a.name = '$source' AND b.name = '$target'
CREATE (a)-[r:$type] -> (b)" *2
################################图谱查询############################################################################################
#根据前端请求生成cypher语句，将json返回给前端
#1.根据全局查询
(1)前端传入参数lable

(2)组装cypher语句
String cypher="match p=(na:$lable)-[*1..]-()" +
                "UNWIND relationships(p) AS rel WITH DISTINCT rel AS r " +
                "WITH startNode(r) AS src,endNode(r) AS tar, type(r) AS t " +
                "RETURN {id:id(src), caption:src.name,properties:properties(src)} AS source, " +
                "{id:id(tar), caption:tar.name,properties:properties(tar)} AS target, " +
                "{source:id(src), target:id(tar), type: t} as links"

(3)向前端返回Json
{
"nodes":[
{"caption":"C_CNTPHONE","id":48,"properties":{"name":"C_CNTPHONE","comment":"电话"}}
],
"links":[
{"source":49,"type":"include","target":49}
]
}

#2.根据层级和节点名查询#########################################################
(1)前端传入参数lable name depth

(2)组装cypher语句
"match p=(na:$lable)-[*1..$depth]-()" +
                "where na.name = $name " +
                "UNWIND relationships(p) AS rel WITH DISTINCT rel AS r " +
                "WITH startNode(r) AS src,endNode(r) AS tar, type(r) AS t " +
                "RETURN {id:id(src), caption:src.name,properties:properties(src)} AS source, " +
                "{id:id(tar), caption:tar.name,properties:properties(tar)} AS target, " +
                "{source:id(src), target:id(tar), type: t} as links"

(3)向前端返回json（格式同上）

#3.返回一个默认的图谱#########################################################
(1)前端请求默认图谱
(2)组装cypher语句
String cypher="match p=(na:Md)-[*1..]-()" +
                "UNWIND relationships(p) AS rel WITH DISTINCT rel AS r " +
                "WITH startNode(r) AS src,endNode(r) AS tar, type(r) AS t " +
                "RETURN {id:id(src), caption:src.name,properties:properties(src)} AS source, " +
                "{id:id(tar), caption:tar.name,properties:properties(tar)} AS target, " +
                "{source:id(src), target:id(tar), type: t} as links"
(3)向前端返回json（格式同上）

################################图谱修改###################################################################################################
#覆盖原来的图谱
(1)前端传入的json格式：
{
"lable":[
{"lablename":"Md"}
],
"nodes":[
{"name":"C_CNTPHONE","comment":"电话"},
{"name":"C_MDFILEID","comment":"元数据标识符"},
{"name":"C_MDLANG","comment":"元数据语种"}
],
"links":[
{"source":"C_CNTPHONE","type":"include","target":"C_MDFILEID"},
{"source":"C_MDLANG","type":"include","target":"C_MDFILEID"}
]
}
(2)Json格式解析：
（i）lable:lablename(知识图谱表名)
(ii)nodes:name（节点名称）,comment（节点注释）
(iii)links:source（关系开始节点）,type（关系名）,target（关系结束节点）

(3)cypher语句组装
String cypher="MATCH (n:$lablename)-[r]-() DELETE n,r"//删除旧图谱

String cypher="CREATE (n:$lablename{name:'$name',comment:'$comment'})" 
String cypher="MATCH (a:$lablename),(b:$lablename)
WHERE a.name = '$source' AND b.name = '$target'
CREATE (a)-[r:$type] -> (b)" 
